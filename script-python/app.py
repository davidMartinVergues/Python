import db_conn as conn
import utils,routes
import pandas as pd
from datetime import datetime
from log_maker import logger_info,logger_error

def backup_database() -> None:
    
    logger_info.info('backup database')
    
    dt = datetime.now()
    date = dt.strftime("%d_%m_%y_%H_%M_%S_%f")
    
    
    compression_opts = dict(method='zip',
                        archive_name=f'exported_data_{date}.csv')
    
    try:
        sql_query = pd.read_sql_query('select * from tablones.Backtesting',conn.conn)
        df = pd.DataFrame(sql_query)
        
        df.to_csv(f'{routes.path_to_backup}\\'+date+'_.zip', index=False,
            compression=compression_opts)

        logger_info.info('retrieving information from database - successful -')
        logger_info.info('ZIP created - successful -')

    except BaseException as err:
        logger_error.error('something went wrong on backup database', exc_info=True)
        logger_error.error(err)
        logger_info.error('something went wrong on backup database')
        
        

def clean_database() -> None:
    
    logger_info.info('cleaning database')
    
    try:
        cursor.execute("TRUNCATE TABLE tablones.Backtesting RESTART IDENTITY")
        conn.conn.commit()
        
        logger_info.info('- succesfull - ')
    except BaseException as err:
        logger_error.error('something went wrong cleaning database',exc_info=True)
        logger_error.error(err)
        logger_info.error('something went wrong cleaning database')
        
    
    

def insert_data_into_sqlserver(json_lis:list) -> None:
    
    logger_info.info('Adding data into database')

    list_of_data = []
    
    for row in json_lis:
        


            values = (
                row.get('Entity'),
                row.get('Name'),
                row.get('Period'),
                str(row.get('Expected Notional (EN)')),
                str(row.get('Expected RW Underlying Assets (%)')),
                str(row.get('EN Of which transferred to third parties')),
                str(row.get('Expected Notional Tranche A')),
                str(row.get('Expected Notional Tranche B')),
                str(row.get('Expected Notional Tranche C')),
                str(row.get('Expected Notional Tranche D')),
                str(row.get('Expected Notional Tranche E')),
                str(row.get('Expected Notional Tranche F')),
                str(row.get('Expected Notional Tranche G')),
                str(row.get('Expected Notional Tranche H')),
                str(row.get('Expected Notional Tranche Z')),
                str(row.get('Expected Notional Tranche X')),
                str(row.get('Subordinated Loan')),
                str(row.get('Expected Subordinated Loan')),
                str(row.get('Actual Subordinated Loan')),
                str(row.get('Expected Retained Tranche A')),
                str(row.get('Expected Retained Tranche B')),
                str(( row.get('Expected Retained Tranche C') or row.get('Expected Retainded  Tranche C') )),
                str(row.get('Expected Retained Tranche D')),
                str(row.get('Expected Retained Tranche E')),
                str(row.get('Expected Retained Tranche F')),
                str(row.get('Expected Retained Tranche G')),
                str(row.get('Expected Retained Tranche H')),
                str(row.get('Expected Retained Tranche Z')),
                str(row.get('Expected Retained Tranche X')),
                str(row.get('Expected Retained SubLoan')),
                str(row.get('Expected RW Tranche A')),
                str(row.get('Expected RW Tranche B')),
                str( ( row.get('Expected RW Tranche C') or row.get('Expected RW  Tranche C') )),
                str(row.get('Expected RW Tranche D')),
                str(row.get('Expected RW Tranche E')),
                str(row.get('Expected RW Tranche F')),
                str(row.get('Expected RW Tranche G')),
                str(row.get('Expected RW Tranche H')),
                str(row.get('Expected RW Tranche X')),
                str(row.get('Expected RW SubLoan')),
                str(row.get('Expected_Overcollateralization')),
                str(row.get('Actual_Overcollateralization')),
                str(( row.get('Expected RW Excess Spread / Overcollateralisation') or row.get('Expected RW Excess Spread /Overcollateralization') )),
                str(( row.get('Excess Spread / Overcollateralisation RW') or row.get('Excess Spread /Overcollateralization RW') )),
                str(( row.get('Excess Spread / Overcollateralisation Deduction CET1') or row.get('Excess Spread /Overcollateralization Deduction CET1') )),
                str(row.get('Actual IRS')),
                str(row.get('Expected IRS')),
                str(row.get('Expected IRS Notional Deduction CET1')),
                str(row.get('Expected IRS Notional Tranche A')),
                str(row.get('Expected IRS Notional Tranche B')),
                str(row.get('Expected IRS Notional Tranche C')),
                str(row.get('Expected IRS Notional Tranche D')),
                str(row.get('Expected IRS Notional Tranche E')),
                str(row.get('Expected IRS Notional Tranche F')),
                str(row.get('Expected Funding benefit (%)')),
                str(row.get('Expected Funding Benefit (gross)')),
                str(row.get('Expected RWAs Relief')),
                str(row.get('Expected RWAs Relief (%)')),
                str(( row.get('Cumulative Expected Losses') or row.get('Cummulative Expected Losses') )),
                str(( row.get('Expected losses (each period)') or row.get('Expected losses\n (each period)') )),
                str(row.get('Expected losses\n (each period).1')),
                str(row.get('Projected Provisions')),
                str(row.get('Attachment Of Transferred Losses')),
                str(( row.get('Losses Allocated to investor tranches Cumulative') or row.get('Losses Allocated to investor tranches Cummulative') )),
                str(row.get('Expected Premium /Coupon Tranche A')),
                str(row.get('Expected Premium /Coupon Tranche B')),
                str(row.get('Expected Premium /Coupon Tranche C')),
                str(row.get('Expected Premium /Coupon Tranche D')),
                str(row.get('Expected Premium /Coupon Tranche E')),
                str(row.get('Expected Premium /Coupon Tranche F')),
                str(row.get('Expected Premium /Coupon Tranche G')),
                str(row.get('Expected Premium /Coupon Tranche H')),
                str(row.get('Expected Premium /Coupon Tranche Z')),
                str(row.get('Expected Cost')),
                str(row.get('Payment periodicity')),
                str(row.get('Payment periodicity.1')),
                str(( row.get('Expected Cost Cumulative') or row.get('Expected Cost Cummulative') )),
                str(( row.get('Expected Cost Cumulative.1') or row.get('Expected Cost Cummulative.1') )),
                str(row.get('Expected Cost Cumulative (gross)')),
                str(row.get('Expected Funding benefit')),
                str(( row.get('Expected Funding benefit cumulative net') or row.get('Expected Funding benefit Cummulative net') )),
                str(row.get('Tax Rate')),
                str(row.get('Tax Rate.1')),
                str(row.get('Expected Cost Net of Tax')),
                str(row.get('Expected Cost Net of Tax Cumulative')),
                str(row.get('Expected Cost Net of Tax.1')),
                str(row.get('Expected Cost Net of Tax Cumulative.1')),
                str(row.get('Capital Ratio Group')),
                str(row.get('Expected Capital Saving')),
                str(row.get('Expected Capital Saving.1')),
                str(row.get('Expected Capital Saving Cumulative')),
                str(row.get('Expected Capital Saving Cumulative.1')),
                str(row.get('Actual Capital Saving Distributed')),
                str(row.get('Expected Capital Saving Distributed')),
                str(row.get('Lifetime to date cost of capital Expected')),
                str(row.get('Cost of Capital of the Entity')),
                str(row.get('Actual Notional (AN)')),
                str(row.get('Actual RW Underlying Assets (%)')),
                str(row.get('AN Of which transferred to third parties')),
                str(row.get('Actual Notional Tranche A')),
                str(row.get('Actual Notional Tranche B')),
                str(row.get('Actual Notional Tranche C')),
                str(row.get('Actual Notional Tranche D')),
                str(row.get('Actual Notional Tranche E')),
                str(row.get('Actual Notional Tranche F')),
                str(row.get('Actual Notional Tranche G')),
                str(row.get('Actual Notional Tranche H')),
                str(row.get('Actual Notional Tranche I')),
                str(row.get('Actual Notional Tranche Z')),
                str(row.get('Actual Notional Tranche X')),
                str(row.get('Actual Notional Tranche A.1')),
                str(row.get('Actual Notional Tranche B.1')),
                str(row.get('Actual Notional Tranche C.1')),
                str(row.get('Actual Notional Tranche D.1')),
                str(row.get('Actual Notional Tranche E.1')),
                str(row.get('Actual Notional Tranche F.1')),
                str(row.get('Actual Notional SubLoan' ) ),
                str(row.get('Actual Notional')),
                str(row.get('Actual Retained Tranche A')),
                str(row.get('Actual Retained Tranche B')),
                str(( row.get('Actual Retained Tranche C') or row.get('Actual  Retainded  Tranche C') )),
                str(( row.get('Actual Retained Tranche D') or row.get('Actual  Retained Tranche D') )),
                str(( row.get('Actual Retained Tranche E') or row.get('Actual  Retained Tranche E') )),
                str(( row.get('Actual Retained Tranche F') or row.get('Actual  Retained Tranche F') )),
                str(row.get('Actual Retained Tranche G')),
                str(row.get('Actual Retained Tranche H')),
                str(row.get('Actual Retained Tranche I')),
                str(row.get('Actual Retained Tranche Z')),
                str(row.get('Actual Retained Tranche X')),
                str(row.get('Actual Retained SubLoan')),
                str(row.get('Actual  RW Tranche A')),
                str(( row.get('Actual  RW Tranche B') or row.get('Actual RW Tranche B') )),
                str(( row.get('Actual  RW Tranche C') or row.get('Actual  RW  Tranche C') )),
                str(row.get('Actual  RW Tranche D')),
                str(row.get('Actual  RW Tranche E')),
                str(row.get('Actual  RW Tranche F')),
                str(row.get('Actual  RW Tranche G')),
                str(row.get('Actual  RW Tranche H')),
                str(row.get('Actual  RW Tranche I')),
                str(row.get('Actual  RW Tranche Z')),
                str(row.get('Actual  RW Tranche X')),
                str(row.get('Actual RW SubLoan')),
                str(( row.get('Actual RW Excess Spread / Overcollateralization') or row.get('Actual RW Excess Spread /Overcollateralization') )),
                str(( row.get('Excess Spread / Overcollateralization with RW') or row.get('Excess Spread /Overcollateralization with RW') )),
                str(( row.get('Excess Spread / Overcollateralization with CET1 Deduction') or row.get('Excess Spread /Overcollateralization with CET1 Deduction') )),
                str(row.get('IRS Notional CET1 Deduction')),
                str(row.get('IRS Notional Tranche A')),
                str(row.get('IRS Notional Tranche B')),
                str(row.get('IRS Notional Tranche C')),
                str(row.get('IRS Notional Tranche D')),
                str(row.get('IRS Notional Tranche E')),
                str(row.get('IRS Notional Tranche F')),
                str(row.get('Funding benefit (%)')),
                str(row.get('Actual RWAs Relief')),
                str(row.get('Actual RWAs Relief (%)')),
                str(( row.get('Cumulative Actual  Losses') or row.get('Cummulative Actual  Losses') )),
                str(( row.get('Actual losses (each period)') or row.get('Actual losses\n (each period)') )),
                str(row.get('Actual Provisions')),
                str(row.get('Attachment Of Transferred Losses2')),
                str(row.get('Attachment Of Transferred Losses.1')),
                str(row.get('Losses Allocated to investor tranches Cumulative3')),
                str(row.get('Losses Allocated to investor tranches Cumulative.1')),
                str(row.get('Actual Losses Allocated to investor tranches Cumulative')),
                str(row.get('Expected Losses Allocated to investor tranches Cumulative')),
                str(row.get('Premium /Coupon Tranche A')),
                str(row.get('Premium /Coupon Tranche B')),
                str(row.get('Premium /Coupon Tranche C')),
                str(row.get('Premium /Coupon Tranche D')),
                str(row.get('Premium /Coupon Tranche E')),
                str(row.get('Premium /Coupon Tranche F')),
                str(row.get('Premium /Coupon Tranche G')),
                str(row.get('Premium /Coupon Tranche H')),
                str(row.get('Premium /Coupon Tranche Z')),
                str(row.get('Premium /Coupon Tranche B.1')),
                str(row.get('Premium /Coupon on sold tranche')),
                str(row.get('Actual Cost')),
                str(row.get('Actual Cost.1')),
                str(row.get('Actual Cost (gross)')),
                str(row.get('Expected Cost (gross)')),
                str(row.get('Payment periodicity4')),
                str(row.get('Actual Cost Cumulative')),
                str(row.get('Actual Funding Benefit')),
                str(row.get('Actual Funding Benefit (gross)')),
                str(row.get('Actual Funding benefit cumulative net')),
                str(row.get('Actual Cumulative Funding Benefit (gross)')),
                str(row.get('Expected - Cumulative Funding Benefit (gross)')),
                str(row.get('Tax Rate5')),
                str(row.get('Actual Cost Net of Tax')),
                str(row.get('Actual Cost Net of Tax Cumulative')),
                str(row.get('Capital Ratio Group6')),
                str(row.get('Capital Ratio Group.1')),
                str(row.get('Actual Capital Saving')),
                str(row.get('Actual Capital Saving Cumulative')),
                str(row.get('Lifetime to date cost of capital Actual')),
                str(row.get('Cost of Capital of the Entity7')),
                str(row.get('Cost of Capital of the Entity.1')),
                str(row.get('Retained RWAs due to collateral')),
                str(row.get('RWA for CCY and Collateral')),
                str(row.get('RWA for CCY and Collateral.1')),
                str(row.get('RWA due to CCY Mismatch')),
                str(row.get('RWA for CCY mismatch')),
                str(row.get('Insurer RWAs')),
                str(row.get('Insurer RW.1')),
                str(row.get('Insurer RW')),
                str(row.get('RWAs due to CCY Mismatch')),
                str(row.get('% Lifetime to date cost of RWAs relief (net of losses) - actual')),
                str(row.get('% Lifetime to date cost of RWAs relief - actual')),
                str(row.get('EAD retained due to CCY Mismatch Tranche B.1')),
                str(row.get('EAD retained due to CCY Mismatch Tranche B')),
                str(row.get('Expected Excess Spread')),
                str(row.get('Actual Excess Spread')),
                str(row.get('Actual Cost Cumulative (gross)')),
                str(( row.get('Actual Cost Cummulative.1') or row.get('Actual Cost Cumulative.1') )),
                str(row.get('Actual Attachment Of Transferred Losses')),
                str(row.get('Expected Attachment Of Transferred Losses')),
                str(row.get('Expected Cash Reserve')),
                str(row.get('Actual Cash Reserve')),
                str(row.get('RWA due to Collateral Haircut')),
                str(row.get('CET1 Capital - Additional Benefit (IRB)')),
                str(row.get('CET1 Capital - Additional Benefit (IRB).1')),
                str(( row.get('FX ') or row.get('FX') )),
                str(row.get('Regulatory Gap (only for day 1)')),
                str(row.get('EAD due to CCY Mismatch Tranche C')),
                str(row.get('EAD due to CCY Mismatch Tranche C.1')),
                str(row.get('CCY Mismatch')),
                str(row.get('CCY Mismatch.1')),
                )

            list_of_data.append(values)
            
            
    try:
        conn.extras.execute_values(cursor, """
            INSERT INTO tablones.Backtesting(
    Entity, 
	Name, 
	Period,
	Expected_Notional_EN, 
	Expected_RW_Underlying_Assets,
	EN_Of_which_transferred_to_third_parties,
	Expected_Notional_Tranche_A, 
	Expected_Notional_Tranche_B,
	Expected_Notional_Tranche_C, 
	Expected_Notional_Tranche_D,  
	Expected_Notional_Tranche_E,  
	Expected_Notional_Tranche_F, 
	Expected_Notional_Tranche_G, 
	Expected_Notional_Tranche_H, 
	Expected_Notional_Tranche_Z,
	Expected_Notional_Tranche_X,
	Subordinated_Loan,
    Expected_Subordinated_Loan ,
    Actual_Subordinated_Loan ,
	Expected_Retained_Tranche_A  ,
	Expected_Retained_Tranche_B  ,
	Expected_Retained_Tranche_C  ,
	Expected_Retained_Tranche_D  ,
	Expected_Retained_Tranche_E  ,
	Expected_Retained_Tranche_F  ,
	Expected_Retained_Tranche_G  ,
	Expected_Retained_Tranche_H  ,
	Expected_Retained_Tranche_Z  ,
	Expected_Retained_Tranche_X  ,
	Expected_Retained_SubLoan  ,  
	Expected_RW_Tranche_A  ,      
	Expected_RW_Tranche_B  ,      
	Expected_RW_Tranche_C  ,      
	Expected_RW_Tranche_D  ,      
	Expected_RW_Tranche_E  ,      
	Expected_RW_Tranche_F  ,      
	Expected_RW_Tranche_G  ,      
	Expected_RW_Tranche_H  ,      
	Expected_RW_Tranche_X  ,      
	Expected_RW_SubLoan  ,        
	Expected_Overcollateralization ,
    Actual_Overcollateralization ,  
	Expected_RW_Excess_Spread_Overcollateralization  , 
	Excess_Spread_Overcollateralization_RW  ,          
	Excess_Spread_Overcollateralization_Deduction_CET1  , 
	Actual_IRS , 
	Expected_IRS ,
	Expected_IRS_Notional_Deduction_CET1  , 
	Expected_IRS_Notional_Tranche_A  , 
	Expected_IRS_Notional_Tranche_B  , 
	Expected_IRS_Notional_Tranche_C  , 
	Expected_IRS_Notional_Tranche_D  , 
	Expected_IRS_Notional_Tranche_E  , 
	Expected_IRS_Notional_Tranche_F  , 
	Expected_Funding_benefit  , 
	Expected_Funding_benefit_gross ,
	Expected_RWAs_Relief  ,      
	Expected_RWAs_Relief_1  ,     
	Cumulative_Expected_Losses  ,
	Expected_losses_each_period  , 
	Expected_losses_each_period_1 , 
	Projected_Provisions  ,        
	Attachment_Of_Transferred_Losses  , 
	Losses_Allocated_to_investor_tranches_Cumulative  , 
	Expected_Premium_Coupon_Tranche_A  ,     
	Expected_Premium_Coupon_Tranche_B  ,     
	Expected_Premium_Coupon_Tranche_C  ,     
	Expected_Premium_Coupon_Tranche_D  ,     
	Expected_Premium_Coupon_Tranche_E  ,     
	Expected_Premium_Coupon_Tranche_F  ,     
	Expected_Premium_Coupon_Tranche_G  ,     
	Expected_Premium_Coupon_Tranche_H  ,     
	Expected_Premium_Coupon_Tranche_Z  ,     
	Expected_Cost  ,
	Payment_periodicity  , 
	Payment_periodicity_1 , 
	Expected_Cost_Cumulative  , 
    Expected_Cost_Cumulative_1 ,
	Expected_Cost_Cumulative_gross , 
	Expected_Funding_benefit_1  , 
	Expected_Funding_benefit_cumulative_net  ,
	Tax_Rate  ,  
	Tax_Rate_1 ,
	Expected_Cost_Net_of_Tax  ,
	Expected_Cost_Net_of_Tax_Cumulative  ,
	Expected_Cost_Net_of_Tax_1 ,  
	Expected_Cost_Net_of_Tax_Cumulative_1 ,
	Capital_Ratio_Group  ,     
	Expected_Capital_Saving  , 
	Expected_Capital_Saving_1 ,
	Expected_Capital_Saving_Cumulative  ,
	Expected_Capital_Saving_Cumulative_1 ,
	Actual_Capital_Saving_Distributed , 
	Expected_Capital_Saving_Distributed , 
	Lifetime_to_date_cost_of_capital_Expected  ,
	Cost_of_Capital_of_the_Entity  ,  
	Actual_Notional_AN  ,             
	Actual_RW_Underlying_Assets  ,    
	AN_Of_which_transferred_to_third_parties  ,
	Actual_Notional_Tranche_A  ,
	Actual_Notional_Tranche_B  ,
	Actual_Notional_Tranche_C  ,
	Actual_Notional_Tranche_D  ,
	Actual_Notional_Tranche_E  ,
	Actual_Notional_Tranche_F  ,
	Actual_Notional_Tranche_G  ,
	Actual_Notional_Tranche_H  ,
	Actual_Notional_Tranche_I , 
	Actual_Notional_Tranche_Z  ,
	Actual_Notional_Tranche_X  ,
	Actual_Notional_Tranche_A_eur ,
	Actual_Notional_Tranche_B_eur ,
	Actual_Notional_Tranche_C_eur ,
	Actual_Notional_Tranche_D_eur ,
	Actual_Notional_Tranche_E_eur ,
	Actual_Notional_Tranche_F_eur ,
	Actual_Notional_SubLoan  ,
    Actual_Notional , 
	Actual_Retained_Tranche_A  ,
	Actual_Retained_Tranche_B  ,
	Actual_Retained_Tranche_C  ,
	Actual_Retained_Tranche_D  ,
	Actual_Retained_Tranche_E  ,
	Actual_Retained_Tranche_F  ,
	Actual_Retained_Tranche_G  ,
	Actual_Retained_Tranche_H  ,
	Actual_Retained_Tranche_I , 
	Actual_Retained_Tranche_Z  ,
	Actual_Retained_Tranche_X  ,
	Actual_Retained_SubLoan  ,  
	Actual_RW_Tranche_A  ,      
	Actual_RW_Tranche_B  ,      
	Actual_RW_Tranche_C  ,      
	Actual_RW_Tranche_D  ,      
	Actual_RW_Tranche_E  ,      
	Actual_RW_Tranche_F  ,      
	Actual_RW_Tranche_G  , 
	Actual_RW_Tranche_H  , 
	Actual_RW_Tranche_I ,  
	Actual_RW_Tranche_Z  , 
	Actual_RW_Tranche_X  , 
	Actual_RW_SubLoan  ,   
	Actual_RW_Excess_Spread_Overcollateralization  , 
	Excess_Spread_Overcollateralization_with_RW  ,   
	Excess_Spread_Overcollateralization_with_CET1_Deduction  ,
	IRS_Notional_CET1_Deduction  ,
	IRS_Notional_Tranche_A  ,
	IRS_Notional_Tranche_B  ,
	IRS_Notional_Tranche_C  ,
	IRS_Notional_Tranche_D  ,
	IRS_Notional_Tranche_E  ,
	IRS_Notional_Tranche_F  ,
	Funding_benefit  ,       
	Actual_RWAs_Relief  ,    
	Actual_RWAs_Relief_1  ,   
	Cumulative_Actual_Losses  , 
	Actual_losses_each_period  ,
	Actual_Provisions  ,        
	Attachment_Of_Transferred_Losses2  , 
	Attachment_Of_Transferred_Losses_1 , 
	Losses_Allocated_to_investor_tranches_Cumulative3  ,
	Losses_Allocated_to_investor_tranches_Cumulative_1 ,
	Actual_Losses_Allocated_to_investor_tranches_Cumulative ,
	Expected_Losses_Allocated_to_investor_tranches_Cumulative ,
	Premium_Coupon_Tranche_A  ,
	Premium_Coupon_Tranche_B  ,
	Premium_Coupon_Tranche_C  ,
	Premium_Coupon_Tranche_D  ,
	Premium_Coupon_Tranche_E  ,
	Premium_Coupon_Tranche_F  ,
	Premium_Coupon_Tranche_G  ,
	Premium_Coupon_Tranche_H  ,
	Premium_Coupon_Tranche_Z  ,
	Premium_Coupon_Tranche_B_1 ,
	Premium_Coupon_on_sold_tranche ,
	Actual_Cost  ,
	Actual_Cost_eur ,
	Actual_Cost_gross , 
	Expected_Cost_gross , 
	Payment_periodicity4  ,
	Actual_Cost_Cumulative  ,
	Actual_Funding_Benefit  ,
	Actual_Funding_Benefit_gross ,
	Actual_Funding_benefit_cumulative_net  ,
	Actual_Cumulative_Funding_Benefit_gross ,  
    Expected_Cumulative_Funding_Benefit_gross , 
	Tax_Rate5  ,  
	Actual_Cost_Net_of_Tax  , 
	Actual_Cost_Net_of_Tax_Cumulative  ,
	Capital_Ratio_Group6  ,  
	Capital_Ratio_Group_1 , 
	Actual_Capital_Saving  , 
	Actual_Capital_Saving_Cumulative  ,
	Lifetime_to_date_cost_of_capital_Actual  ,
	Cost_of_Capital_of_the_Entity7  ,
	Cost_of_Capital_of_the_Entity_1 ,
	Retained_RWAs_due_to_collateral ,
	RWA_for_CCY_and_Collateral ,   
    RWA_for_CCY_and_Collateral_1 , 
    RWA_due_to_CCY_Mismatch , 
	RWA_for_CCY_mismatch , 
    Insurer_RWAs ,  
	Insurer_RW_1 ,
	Insurer_RW , 
    RWAs_due_to_CCY_Mismatch ,  
    Lifetime_to_date_cost_of_RWAs_relief_net_of_losses_actual ,
    Lifetime_to_date_cost_of_RWAs_relief_actual ,
    EAD_retained_due_to_CCY_Mismatch_Tranche_B_1 ,
    EAD_retained_due_to_CCY_Mismatch_Tranche_B ,    
	Expected_Excess_Spread ,  
	Actual_Excess_Spread ,   
	Actual_Cost_Cumulative_gross ,
    Actual_Cost_Cumulative_eur ,  
	Actual_Attachment_Of_Transferred_Losses ,
	Expected_Attachment_Of_Transferred_Losses ,
	Expected_Cash_Reserve ,  
	Actual_Cash_Reserve ,  
	RWA_due_to_Collateral_Haircut , 
	CET1_Capital_Additional_Benefit_IRB ,  
	CET1_Capital_Additional_Benefit_IRB_1 ,  
	FX , 
	Regulatory_Gap_only_for_day_1 , 
	EAD_due_to_CCY_Mismatch_Tranche_C ,
	EAD_due_to_CCY_Mismatch_Tranche_C_1 ,  
	CCY_Mismatch ,
	CCY_Mismatch_1 ) VALUES %s;
        """,
        list_of_data 
        )
    except BaseException as err:
        logger_error.error(f'Data not added into database - {row}\n', exc_info=True)
        logger_error.error(err)
        logger_info.error(f'Data not added into database - {row}\n')

    logger_info.info(f'Adding finished')    
    conn.conn.commit()
    
   
if __name__ == "__main__":
    
    cursor=conn.conn.cursor()

    json_list = utils.read_all_files_to_json(routes.path_to_excels)

    
    if len(json_list)>0:
        backup_database()
        clean_database()
        insert_data_into_sqlserver(json_list)

    cursor.close()
    conn.conn.close()
